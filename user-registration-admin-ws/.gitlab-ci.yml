# This file is a template, and might need editing before it works on your project.
---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Does only verify merge requests but deploy built artifacts of the
#   master branch.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.
stages:
  - build
  #- test
  - verify
  - deploy

variables:
  RUNNER_ROOT: "/Users/vinayraja/Documents/server/ci-runner/"
  PROJECT_PATH: "/"

   # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=$RUNNER_ROOT/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
before_script:
  - mkdir -p $RUNNER_ROOT/.temp $RUNNER_ROOT/.temp/$CI_JOB_ID
  - cp -rf ./* $RUNNER_ROOT/.temp/$CI_JOB_ID/.  
  - cp -rf .git $RUNNER_ROOT/.temp/$CI_JOB_ID/.

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
validate:
  stage: build
  script:
    - cd $RUNNER_ROOT/.temp/$CI_JOB_ID/$PROJECT_PATH
    - mvn $MAVEN_CLI_OPTS clean test-compile

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#.verify: &verify
#  stage: test
#  script:
#    - cd $RUNNER_ROOT/.temp/$CI_JOB_ID/$PROJECT_PATH
#    - mvn $MAVEN_CLI_OPTS clean test

sonar-verify:
  stage: verify
  script:
    - cd $RUNNER_ROOT/.temp/$CI_JOB_ID/$PROJECT_PATH
    - mvn $MAVEN_CLI_OPTS verify org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar -Dsonar.language=java -Dsonar.scm.provider=git -Dsonar.java.source=1.8

deploy:
  stage: deploy
  script:
    - mvn $MAVEN_CLI_OPTS clean install  -f $RUNNER_ROOT/.temp/$CI_JOB_ID/$PROJECT_PATH/
    - mkdir $CI_JOB_ID
    - cp $RUNNER_ROOT/.temp/$CI_JOB_ID/$PROJECT_PATH/target/*.war $CI_JOB_ID/.
  only:
    - maste
    - uat
    - test
  # Archive up the built documentation site.
  artifacts:
    paths:
      - $CI_JOB_ID/*.war

after_script:
  - rm -rf $RUNNER_ROOT/.temp/$CI_JOB_ID
